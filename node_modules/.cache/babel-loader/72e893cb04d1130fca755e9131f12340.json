{"ast":null,"code":"import _defineProperty from \"/home/danil/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/React/my-app-local/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport API from './../API/api.js';\nimport { profile_setProfilePage, profile_setProfilePosts, profile_setNewPostVal, profile_delPost, profile_updatePostAssess, profile_addPost } from './dispatch-types.js';\nlet data = {\n  user: {\n    id: null,\n    name: null,\n    mail: null,\n    img: null\n  },\n  posts: [],\n  isPostHave: false\n};\nexport const ProfileReducer = (state = data, action) => {\n  //state = ProfilePage\n  switch (action.type) {\n    case 'ADD-POST':\n      {\n        return _objectSpread({}, state, {\n          posts: [...state.posts, action.data],\n          isPostHave: true\n        });\n      }\n\n    case 'SET-PROFILE-ID':\n      {\n        return _objectSpread({}, state, {\n          user: _objectSpread({}, state.user, {\n            id: action.data\n          })\n        });\n      }\n\n    case 'SET-PROFILE-PAGE':\n      {\n        return _objectSpread({}, state, {\n          user: {\n            id: action.data.id,\n            name: action.data.name,\n            mail: action.data.mail,\n            img: action.data.img\n          },\n          isPostHave: false,\n          posts: []\n        });\n      }\n\n    case 'SET-PROFILE-POSTS':\n      {\n        return _objectSpread({}, state, {\n          posts: action.data,\n          isPostHave: true\n        });\n      }\n\n    case 'SET-NEW-POST-VALUE':\n      {\n        let newPosts = [];\n\n        for (var i = 0; i < state.posts.length; i++) {\n          if (state.posts[i] && state.posts[i].postId == action.data.postId) {\n            newPosts[i] = state.posts[i];\n            newPosts[i].text = action.data.text;\n            newPosts[i].postId = action.data.postId;\n          } else {\n            newPosts[i] = state.posts[i];\n          }\n        }\n\n        return _objectSpread({}, state, {\n          posts: newPosts\n        });\n      }\n\n    case 'DELETE-POST':\n      {\n        let newPosts = [];\n\n        for (var i = 0; i < state.posts.length; i++) {\n          if (state.posts[i]) {\n            if (state.posts[i].postId != action.data) {\n              newPosts[i] = state.posts[i];\n            }\n          }\n        }\n\n        return _objectSpread({}, state, {\n          posts: newPosts\n        });\n      }\n\n    case 'UPDATE-POST-LIKE-VAL':\n      {\n        return _objectSpread({}, state, {\n          posts: [...state.posts].map(post => {\n            debugger;\n\n            if (action.id == post.postId) {\n              debugger;\n              return _objectSpread({}, post, {}, action.data);\n            }\n\n            return post;\n          })\n        });\n      }\n  }\n\n  return state;\n};\nexport const getProfile = (url, authId) => async dispatch => {\n  var id = url.split(\"/\")[2];\n\n  if (!id) {\n    id = authId;\n  }\n\n  let res = await new API().getProfile(id);\n  dispatch(profile_setProfilePage(_objectSpread({}, res.data, {\n    id: id\n  })));\n};\n/*------------------------\n\t TRANSFORM FUNCTION\n  ------------------------*/\n\nlet transUsersАsses = Assessment => {\n  if (Assessment == null) {\n    return [];\n  }\n\n  Assessment = Assessment.split(';');\n  Assessment.splice(-1, 1);\n\n  if (Assessment.length == 0) {\n    return null;\n  }\n\n  return Assessment;\n};\n\nexport const getPosts = id => async dispatch => {\n  let res = await new API().getPosts(id);\n  let data = res.data;\n\n  if (data.length != 0) {\n    data = data.map(post => {\n      return _objectSpread({}, post, {\n        users: {\n          like: transUsersАsses(post.users.like),\n          dislike: transUsersАsses(post.users.dislike)\n        }\n      });\n    });\n    dispatch(profile_setProfilePosts(data));\n  }\n};\nexport const setPost = data => async dispatch => {\n  let res = await new API().setPost(data.id, data.post);\n  debugger;\n\n  if (res.data.status == 'ok') {\n    dispatch(profile_addPost(data, res));\n  }\n};\nexport const updatePost = (text, postId) => async dispatch => {\n  let res = await new API().updatePost(text, postId);\n  dispatch(profile_setNewPostVal(res.data));\n};\nexport const deletePost = postId => async dispatch => {\n  dispatch(profile_delPost(postId));\n  let res = await new API().deletePost(postId);\n  debugger;\n};\nexport const updateLikesVal = data => async dispatch => {\n  let res = await new API().updateLikesVal(data);\n\n  let newData = _objectSpread({}, res.data, {\n    users: {\n      like: transUsersАsses(res.data.users.like),\n      dislike: transUsersАsses(res.data.users.dislike)\n    }\n  });\n\n  dispatch(profile_updatePostAssess(data, newData));\n};","map":{"version":3,"sources":["/home/danil/Рабочий стол/React/my-app-local/src/redux/profile-reducer.js"],"names":["API","profile_setProfilePage","profile_setProfilePosts","profile_setNewPostVal","profile_delPost","profile_updatePostAssess","profile_addPost","data","user","id","name","mail","img","posts","isPostHave","ProfileReducer","state","action","type","newPosts","i","length","postId","text","map","post","getProfile","url","authId","dispatch","split","res","transUsersАsses","Assessment","splice","getPosts","users","like","dislike","setPost","status","updatePost","deletePost","updateLikesVal","newData"],"mappings":"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","sourcesContent":["import API from './../API/api.js';\nimport {profile_setProfilePage,\n\t\tprofile_setProfilePosts,\n\t\tprofile_setNewPostVal,\n\t\tprofile_delPost,\n\t\tprofile_updatePostAssess,\n\t\tprofile_addPost} from './dispatch-types.js';\nlet data = {\n\t\tuser: {\n\t\t\tid: null,\n\t\t\tname: null,\n\t\t\tmail: null,\n\t\t\timg: null\n\t\t},\n\t\tposts: [],\n\t\tisPostHave: false\n}\n\nexport const ProfileReducer = (state = data, action) => { //state = ProfilePage\n\tswitch(action.type){\n\t\tcase 'ADD-POST': {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: [\n\t\t\t\t\t...state.posts,\n\t\t\t\t\taction.data\n\t\t\t\t],\n\t\t\t\tisPostHave: true\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcase 'SET-PROFILE-ID': {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: {\n\t\t\t\t\t...state.user,\n\t\t\t\t\tid: action.data\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcase 'SET-PROFILE-PAGE': {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: {\n\t\t\t\t\tid: action.data.id,\n\t\t\t\t\tname: action.data.name,\n\t\t\t\t\tmail: action.data.mail,\n\t\t\t\t\timg: action.data.img\n\t\t\t\t},\n\t\t\t\tisPostHave: false,\n\t\t\t\tposts: []\n\t\t\t}\n\t\t}\n\t\tcase 'SET-PROFILE-POSTS': {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: action.data,\n\t\t\t\tisPostHave: true\n\t\t\t}\n\t\t}\n\t\tcase 'SET-NEW-POST-VALUE': {\n\n\t\t\tlet newPosts = [];\n\n\t\t\tfor (var i = 0; i < state.posts.length; i++) {\n\t\t\t\tif(state.posts[i] && state.posts[i].postId == action.data.postId){\n\t\t\t\t\tnewPosts[i] = state.posts[i];\n\t\t\t\t\tnewPosts[i].text = action.data.text;\n\t\t\t\t\tnewPosts[i].postId = action.data.postId;\n\t\t\t\t}else{\n\t\t\t\t\t\tnewPosts[i] = state.posts[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: newPosts\n\t\t\t}\n\t\t}\n\t\tcase 'DELETE-POST': {\n\t\t\tlet newPosts = [];\n\t\t\tfor (var i = 0; i < state.posts.length; i++) {\n\t\t\t\tif(state.posts[i]){\n\t\t\t\t\tif(state.posts[i].postId != action.data){\t\n\t\t\t\t\tnewPosts[i] = state.posts[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: newPosts\n\t\t\t}\t\n\t\t}\n\n\t\tcase 'UPDATE-POST-LIKE-VAL': {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: [...state.posts].map((post) => {\n\t\t\t\t\tdebugger;\n\t\t\t\t\tif(action.id == post.postId){\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...post,\n\t\t\t\t\t\t\t...action.data\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn post\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t}\n\n\n\n\treturn state; \n}\n\nexport const getProfile = (url, authId) => async (dispatch) => {\n\t\tvar id = url.split(\"/\")[2];\n\t\tif(!id){\n\t\t\tid = authId;\n\t\t}\n\t\tlet res = await new API().getProfile(id);\n  \t\tdispatch(profile_setProfilePage({...res.data, id: id}));\n}\n\n/*------------------------\n\t TRANSFORM FUNCTION\n  ------------------------*/\n\nlet transUsersАsses = (Assessment) => {\n\tif(Assessment == null){\n\t\treturn [];\n\t}\n\tAssessment = Assessment.split(';');\n\tAssessment.splice(-1, 1);\n\tif(Assessment.length == 0){\n\t\treturn null;\n\t}\n\treturn Assessment;\n}\n\n\nexport const getPosts = (id) => async (dispatch) => {\n\tlet res = await new API().getPosts(id);\n\tlet data = res.data;\n\tif(data.length != 0){\n\t\tdata = data.map((post) => {\n\t\t\treturn {\n\t\t\t\t...post,\n\t\t\t\tusers: {\n\t\t\t\t\tlike: transUsersАsses(post.users.like),\n\t\t\t\t\tdislike: transUsersАsses(post.users.dislike)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tdispatch(profile_setProfilePosts(data));\n\t}\n}\n\nexport const setPost = (data) => async (dispatch) => {\n\tlet res = await new API().setPost(data.id, data.post);\n\tdebugger;\n\tif(res.data.status == 'ok'){\n\t\tdispatch(profile_addPost(data, res));\n\t}\n}\n\nexport const updatePost = (text, postId) => async (dispatch) => {\n\tlet res = await new API().updatePost(text, postId);\n\tdispatch(profile_setNewPostVal(res.data));\n}\n\nexport const deletePost = (postId) => async (dispatch) => {\n\tdispatch(profile_delPost(postId));\n\tlet res = await new API().deletePost(postId);\n\tdebugger;\n}\n\nexport const updateLikesVal = (data) => async (dispatch) => {\n\tlet res = await new API().updateLikesVal(data);\n\tlet newData = {\n\t\t...res.data,\n\t\tusers: {\n\t\t\tlike: transUsersАsses(res.data.users.like),\n\t\t\tdislike: transUsersАsses(res.data.users.dislike)\n\t\t}\n\t}\n\tdispatch(profile_updatePostAssess(data, newData));\n}"]},"metadata":{},"sourceType":"module"}